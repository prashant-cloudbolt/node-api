name: node-api-stage-codedeploy

on:
  workflow_dispatch:
    inputs:
      codedeploy_rollback:
        description: "Trigger rollback in dependent workflow if value if True"
        required: false
        default: 'False'
      # distinct_id:
      #   description: "This input required to run the workflow from return-dispatch"

permissions:
  id-token: write 
  contents: read
  pull-requests: write
  security-events: write
  actions: read

jobs:
  codedeploy:
    name: Trigger codedeploy with latest commit to Stage
    runs-on: ubuntu-latest

    environment:
      name: STAGE

    steps:
      - uses: actions/checkout@v4
        name: Checkout Repository

      - name: Get Commit Hash from Tag
        if: ${{ github.event.inputs.codedeploy_rollback == 'True' }}
        id: commit_hash
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          case $branch_name in
            multi_tenant_*)
              branch_suffix=$(echo "$branch_name" | sed 's/multi_tenant_//; s/-//g')
              ;;
            mira-stage)
              branch_suffix="STAGE"
              ;;
            *)
              echo "Unsupported branch: $branch_name"
              exit 1
              ;;
          esac

          # Convert suffix to uppercase
          branch_suffix=$(tr '[:lower:]' '[:upper:]' <<< "$branch_suffix")
          echo "branch_suffix=$branch_suffix" >> $GITHUB_ENV

          latest_release=$(gh release list --limit 30 | grep -E "$branch_suffix" | sort -k4 -r | head -n 1 | awk '{print $1}')
          echo "latest_release=$latest_release" >> $GITHUB_ENV

          release_tag=$(gh release view $latest_release --json tagName -q ".tagName")
          echo "release_tag=$release_tag" >> $GITHUB_ENV

          commit_hash=$(gh api repos/${{ github.repository }}/git/ref/tags/$release_tag --jq '.object.sha')
          echo "commit_hash=$commit_hash" >> $GITHUB_ENV

      - name: Display Results of Release, Tag, Hash
        if: ${{ github.event.inputs.codedeploy_rollback == 'True' }}
        run: |
          echo "Branch Suffix: ${{ env.branch_suffix }}"
          echo "Current Release: ${{ env.latest_release }}"
          echo "Current Release Tag: ${{ env.release_tag }}"
          echo "Commit Hash of Tag: ${{ env.commit_hash }}"

      - name: Echo Branch name
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          echo "branch name is : $branch_name"
          echo "ENV name is : ${{ vars.ENV }}"

          if [ -z "${{ env.commit_hash }}" ]; then
            commit_hash=$(git rev-parse HEAD)
          else
            commit_hash=${{ env.commit_hash }}
          fi

          echo "commit_hash=$commit_hash"

      # - name: echo distinct ID ${{ github.event.inputs.distinct_id }}
      #   run: echo ${{ github.event.inputs.distinct_id }}