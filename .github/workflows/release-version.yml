name: release-node-api-version

on:
  workflow_dispatch:
    inputs:
      distinct_id:
        description: "This input required to run the workflow from return-dispatch"

permissions:
  id-token: write
  contents: read
  pull-requests: write
  security-events: write
  actions: read

jobs:
  generate-tag:
    name: Generate tag
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.version-tag.outputs.tag }}
      next-version: CSMP-${{steps.determine-branch-suffix.outputs.branch_suffix}}-NODE-API-v${{ steps.increment-semantic-version.outputs.next-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Determine branch suffix
        id: determine-branch-suffix
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          case $branch_name in
            multi_tenant_*)
              branch_suffix=$(echo "$branch_name" | sed 's/multi_tenant_//; s/-//g')
              ;;
            mira-stage)
              branch_suffix="STAGE"
              ;;
            *)
              echo "Unsupported branch: $branch_name"
              exit 1
              ;;
          esac
           # Convert suffix to uppercase
           branch_suffix=$(tr '[:lower:]' '[:upper:]' <<< "$branch_suffix")
           echo "branch_suffix=$branch_suffix" >> $GITHUB_OUTPUT

      - name: Print branch suffix again
        run: |
          echo "Branch suffix: ${{ steps.determine-branch-suffix.outputs.branch_suffix }}"

      - name: Get Latest Tag
        id: version-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          latest_version=$(gh release list --limit 30 | grep -E ${{ steps.determine-branch-suffix.outputs.branch_suffix }} | sort -k4 -r | head -n 1 | awk '{print $1}' | sed 's/.*v//')
          echo "tag=$latest_version" >> $GITHUB_OUTPUT

      - name: Get version fragment from branch name (use feature as default if no value found)
        id: get-version-fragment
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Extract version fragment:
          version_fragment=$(gh pr list -R CloudboltSoftware/api --state merged | head -n 1 | awk '{print $(NF-2)}' | cut -d"/" -f1)

          # Set version fragment based on value:
          if [[ "$version_fragment" == "bug" ]]; then
            version_fragment="bug"
            echo "Version fragment set to: bug"
          elif [[ "$version_fragment" == "major" ]]; then
            version_fragment="major"
            echo "Version fragment set to: major"
          else
            version_fragment="feature"
            echo "No matching fragment found, using default: feature"
          fi
          
          echo "Version fragment: $version_fragment"
          echo "version_fragment=$version_fragment" >> $GITHUB_OUTPUT

      - name: Increment semantic version
        id: increment-semantic-version
        uses: christian-draeger/increment-semantic-version@1.1.0
        with:
          current-version: ${{ steps.version-tag.outputs.tag }}
          version-fragment: ${{ steps.get-version-fragment.outputs.version_fragment }}

      - name: Create new release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: >
          gh release create CSMP-${{steps.determine-branch-suffix.outputs.branch_suffix}}-NODE-API-v${{ steps.increment-semantic-version.outputs.next-version }} -t CSMP-${{steps.determine-branch-suffix.outputs.branch_suffix}}-NODE-API-v${{ steps.increment-semantic-version.outputs.next-version }} --notes-start-tag CSMP-${{steps.determine-branch-suffix.outputs.branch_suffix}}-NODE-API-v${{ steps.version-tag.outputs.tag }} --generate-notes --prerelease
      
      - name: Notify Slack on failure
        if: failure() # This ensures the step runs only if the previous steps fail
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_NOTIFICATION_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "text": "",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": ":rotating_light: *Urgent*: Node API Version Release Job Failed: https://github.com/CloudBoltSoftware/node-api/actions/workflows/release-version.yml \n"
                  }
                }
              ]
            }

      - name: echo distinct ID ${{ github.event.inputs.distinct_id }}
        run: echo ${{ github.event.inputs.distinct_id }}